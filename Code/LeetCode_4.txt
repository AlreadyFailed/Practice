# 找出两个数组中的，中位数

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // 定义三个指针，分别指向数组1，数组2，和新数组
        int i = 0;
        int j = 0;
        int k = 0;
        // 声明一个新数组，长度为两数组之和
        int[] arr = new int[nums1.length + nums2.length];
        // 进行归并排序，当扫描完毕，短数组已经扫描完毕
        while(i < nums1.length && j < nums2.length){
            if(nums1[i] > nums2[j]){
                arr[k++] = nums2[j++];
            }else{
                arr[k++] = nums1[i++];
            }
        }
        // 对长数组进行归并排序
        if(i < nums1.length){
            for(int m = i; m < nums1.length; m++){
                arr[k++] = nums1[i++];
            }
        }else{
            for(int n = j; n < nums2.length; n++){
                arr[k++] = nums2[j++];
            }
        }

        // 计算中位数，如果是偶数长度，则去两数之和的一半，如果是奇数长度，则直接返回该中位数
        if(arr.length % 2 == 1){
            return arr[(arr.length / 2)];
        }else{
            return (double)(arr[(arr.length / 2) - 1] + arr[arr.length / 2]) / 2;
        }
    }
}